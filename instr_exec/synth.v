/* Generated by Yosys 0.9 (git sha1 1979e0b) */

(* top =  1  *)
(* src = "instr_exec.v:2" *)
module processor(clk, rst, data, r, w, PC);
  (* src = "instr_exec.v:24" *)
  wire [7:0] _000_;
  (* src = "instr_exec.v:24" *)
  wire [7:0] _001_;
  (* src = "instr_exec.v:24" *)
  wire [2:0] _002_;
  (* src = "instr_exec.v:24" *)
  wire _003_;
  (* src = "instr_exec.v:18" *)
  wire [2:0] _004_;
  (* src = "instr_exec.v:24" *)
  wire [2:0] _005_;
  (* src = "instr_exec.v:24" *)
  wire [2:0] _006_;
  (* src = "instr_exec.v:24" *)
  wire _007_;
  (* src = "instr_exec.v:24" *)
  wire _008_;
  (* src = "instr_exec.v:24" *)
  wire _009_;
  (* src = "instr_exec.v:24" *)
  wire _010_;
  (* src = "instr_exec.v:24" *)
  wire _011_;
  (* src = "instr_exec.v:24" *)
  wire _012_;
  (* src = "instr_exec.v:24" *)
  wire _013_;
  (* src = "instr_exec.v:24" *)
  wire _014_;
  (* src = "instr_exec.v:24" *)
  wire _015_;
  (* src = "instr_exec.v:24" *)
  wire _016_;
  (* src = "instr_exec.v:24" *)
  wire _017_;
  (* src = "instr_exec.v:24" *)
  wire _018_;
  (* src = "instr_exec.v:24" *)
  wire _019_;
  (* src = "instr_exec.v:18" *)
  wire _020_;
  (* src = "instr_exec.v:18" *)
  wire _021_;
  (* src = "instr_exec.v:18" *)
  wire _022_;
  (* src = "instr_exec.v:4" *)
  wire _023_;
  (* src = "instr_exec.v:4" *)
  wire _024_;
  (* src = "instr_exec.v:4" *)
  wire _025_;
  (* src = "instr_exec.v:2" *)
  wire _026_;
  (* src = "instr_exec.v:2" *)
  wire _027_;
  (* src = "instr_exec.v:2" *)
  wire _028_;
  (* src = "instr_exec.v:2" *)
  wire _029_;
  (* src = "instr_exec.v:2" *)
  wire _030_;
  (* src = "instr_exec.v:2" *)
  wire _031_;
  (* src = "instr_exec.v:2" *)
  wire _032_;
  (* src = "instr_exec.v:2" *)
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  (* src = "instr_exec.v:11" *)
  wire _051_;
  (* src = "instr_exec.v:11" *)
  wire _052_;
  (* src = "instr_exec.v:11" *)
  wire _053_;
  (* src = "instr_exec.v:2" *)
  wire _054_;
  (* src = "instr_exec.v:11" *)
  wire _055_;
  (* src = "instr_exec.v:11" *)
  wire _056_;
  (* src = "instr_exec.v:11" *)
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire [3:0] _076_;
  wire [1:0] _077_;
  wire [3:0] _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire [7:0] _084_;
  wire [7:0] _085_;
  wire [2:0] _086_;
  wire [2:0] _087_;
  wire _088_;
  (* src = "instr_exec.v:53|instr_exec.v:26|<techmap.v>:432" *)
  wire [8:0] _089_;
  wire _090_;
  (* src = "instr_exec.v:58|<techmap.v>:260|<techmap.v>:203" *)
  (* unused_bits = "7" *)
  wire [31:0] _091_;
  (* src = "instr_exec.v:53|instr_exec.v:26|<techmap.v>:445" *)
  wire _092_;
  (* src = "instr_exec.v:58|<techmap.v>:260|<techmap.v>:222" *)
  wire _093_;
  (* src = "instr_exec.v:58|<techmap.v>:260|<techmap.v>:222" *)
  wire _094_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _095_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _096_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _097_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _098_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _099_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _100_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _101_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _102_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _103_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _104_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _105_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _106_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _107_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _108_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _109_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _110_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _111_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _112_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _113_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _114_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _115_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _116_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _117_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _118_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _119_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _120_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _121_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _122_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _123_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _124_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _125_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _126_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _127_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _128_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _129_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _130_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _131_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _132_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _133_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _134_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _135_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _136_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _137_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _138_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _139_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _140_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _141_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _142_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _143_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _144_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _145_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _146_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _147_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _148_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _149_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _150_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _151_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _152_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _153_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _154_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _155_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _156_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _157_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _158_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _159_;
  (* src = "instr_exec.v:24|DLATCHmap.v:1" *)
  wire _160_;
  (* init = 8'h00 *)
  (* src = "instr_exec.v:4" *)
  wire [7:0] IR;
  (* init = 8'h00 *)
  (* src = "instr_exec.v:2" *)
  output [7:0] PC;
  (* src = "instr_exec.v:4" *)
  wire [7:0] R0;
  (* src = "instr_exec.v:4" *)
  wire [7:0] R1;
  (* init = 8'h00 *)
  (* src = "instr_exec.v:4" *)
  wire [7:0] R2;
  (* src = "instr_exec.v:2" *)
  input clk;
  (* src = "instr_exec.v:2" *)
  inout [7:0] data;
  (* src = "instr_exec.v:11" *)
  wire [2:0] next_state;
  (* init = 1'h0 *)
  (* src = "instr_exec.v:2" *)
  output r;
  (* src = "instr_exec.v:2" *)
  input rst;
  (* src = "instr_exec.v:11" *)
  wire [2:0] state;
  (* src = "instr_exec.v:5" *)
  wire [7:0] tmp_data;
  (* init = 1'h0 *)
  (* src = "instr_exec.v:2" *)
  output w;
  INVX1 _161_ (
    .A(_057_),
    .Y(_040_)
  );
  INVX1 _162_ (
    .A(_054_),
    .Y(_041_)
  );
  INVX1 _163_ (
    .A(_026_),
    .Y(_007_)
  );
  INVX1 _164_ (
    .A(_029_),
    .Y(_042_)
  );
  INVX1 _165_ (
    .A(_030_),
    .Y(_043_)
  );
  AND2X1 _166_ (
    .A(_040_),
    .B(_056_),
    .Y(_018_)
  );
  NAND2X1 _167_ (
    .A(_040_),
    .B(_055_),
    .Y(_044_)
  );
  AND2X1 _168_ (
    .A(_055_),
    .B(_018_),
    .Y(_015_)
  );
  NOR2X1 _169_ (
    .A(_056_),
    .B(_044_),
    .Y(_039_)
  );
  INVX1 _170_ (
    .A(_039_),
    .Y(_019_)
  );
  NOR2X1 _171_ (
    .A(_055_),
    .B(_056_),
    .Y(_034_)
  );
  AND2X1 _172_ (
    .A(_057_),
    .B(_034_),
    .Y(_035_)
  );
  AND2X1 _173_ (
    .A(_051_),
    .B(_041_),
    .Y(_020_)
  );
  AND2X1 _174_ (
    .A(_041_),
    .B(_052_),
    .Y(_021_)
  );
  AND2X1 _175_ (
    .A(_041_),
    .B(_053_),
    .Y(_022_)
  );
  NOR2X1 _176_ (
    .A(_018_),
    .B(_035_),
    .Y(_016_)
  );
  NOR2X1 _177_ (
    .A(_057_),
    .B(_056_),
    .Y(_036_)
  );
  OR2X1 _178_ (
    .A(_040_),
    .B(_034_),
    .Y(_038_)
  );
  NAND2X1 _179_ (
    .A(_027_),
    .B(_026_),
    .Y(_045_)
  );
  XOR2X1 _180_ (
    .A(_027_),
    .B(_026_),
    .Y(_008_)
  );
  NAND3X1 _181_ (
    .A(_027_),
    .B(_026_),
    .C(_028_),
    .Y(_046_)
  );
  XNOR2X1 _182_ (
    .A(_028_),
    .B(_045_),
    .Y(_009_)
  );
  NOR2X1 _183_ (
    .A(_042_),
    .B(_046_),
    .Y(_047_)
  );
  XNOR2X1 _184_ (
    .A(_029_),
    .B(_046_),
    .Y(_010_)
  );
  NOR3X1 _185_ (
    .A(_042_),
    .B(_043_),
    .C(_046_),
    .Y(_048_)
  );
  XNOR2X1 _186_ (
    .A(_043_),
    .B(_047_),
    .Y(_011_)
  );
  NAND2X1 _187_ (
    .A(_031_),
    .B(_048_),
    .Y(_049_)
  );
  XOR2X1 _188_ (
    .A(_031_),
    .B(_048_),
    .Y(_012_)
  );
  NAND3X1 _189_ (
    .A(_031_),
    .B(_032_),
    .C(_048_),
    .Y(_050_)
  );
  XNOR2X1 _190_ (
    .A(_032_),
    .B(_049_),
    .Y(_013_)
  );
  XNOR2X1 _191_ (
    .A(_033_),
    .B(_050_),
    .Y(_014_)
  );
  AND2X1 _192_ (
    .A(_040_),
    .B(_056_),
    .Y(_037_)
  );
  (* src = "instr_exec.v:18" *)
  DFFPOSX1 _193_ (
    .CLK(clk),
    .D(_004_[0]),
    .Q(state[0])
  );
  (* src = "instr_exec.v:18" *)
  DFFPOSX1 _194_ (
    .CLK(clk),
    .D(_004_[1]),
    .Q(state[1])
  );
  (* src = "instr_exec.v:18" *)
  DFFPOSX1 _195_ (
    .CLK(clk),
    .D(_004_[2]),
    .Q(state[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "instr_exec.v:24|DLATCHmap.v:2" *)
  LATCH _196_ (
    .CLK(_068_),
    .D(data[2]),
    .Q(IR[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "instr_exec.v:24|DLATCHmap.v:2" *)
  LATCH _197_ (
    .CLK(_068_),
    .D(data[1]),
    .Q(IR[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "instr_exec.v:24|DLATCHmap.v:2" *)
  LATCH _198_ (
    .CLK(_068_),
    .D(data[7]),
    .Q(IR[7])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "instr_exec.v:24|DLATCHmap.v:2" *)
  LATCH _199_ (
    .CLK(_059_),
    .D(1'h0),
    .Q(w)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "instr_exec.v:24|DLATCHmap.v:2" *)
  LATCH _200_ (
    .CLK(_061_),
    .D(_000_[0]),
    .Q(PC[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "instr_exec.v:24|DLATCHmap.v:2" *)
  LATCH _201_ (
    .CLK(_061_),
    .D(_000_[1]),
    .Q(PC[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "instr_exec.v:24|DLATCHmap.v:2" *)
  LATCH _202_ (
    .CLK(_061_),
    .D(_000_[2]),
    .Q(PC[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "instr_exec.v:24|DLATCHmap.v:2" *)
  LATCH _203_ (
    .CLK(_061_),
    .D(_000_[3]),
    .Q(PC[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "instr_exec.v:24|DLATCHmap.v:2" *)
  LATCH _204_ (
    .CLK(_061_),
    .D(_000_[4]),
    .Q(PC[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "instr_exec.v:24|DLATCHmap.v:2" *)
  LATCH _205_ (
    .CLK(_061_),
    .D(_000_[5]),
    .Q(PC[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "instr_exec.v:24|DLATCHmap.v:2" *)
  LATCH _206_ (
    .CLK(_061_),
    .D(_000_[6]),
    .Q(PC[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "instr_exec.v:24|DLATCHmap.v:2" *)
  LATCH _207_ (
    .CLK(_061_),
    .D(_000_[7]),
    .Q(PC[7])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "instr_exec.v:24|DLATCHmap.v:2" *)
  LATCH _208_ (
    .CLK(_063_),
    .D(_003_),
    .Q(r)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "instr_exec.v:24|DLATCHmap.v:2" *)
  LATCH _209_ (
    .CLK(_066_),
    .D(1'h1),
    .Q(R2[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "instr_exec.v:24|DLATCHmap.v:2" *)
  LATCH _210_ (
    .CLK(_066_),
    .D(1'h0),
    .Q(R2[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "instr_exec.v:24|DLATCHmap.v:2" *)
  LATCH _211_ (
    .CLK(_066_),
    .D(_001_[7]),
    .Q(R2[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "instr_exec.v:24|DLATCHmap.v:2" *)
  LATCH _212_ (
    .CLK(_061_),
    .D(R2[3]),
    .Q(data[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "instr_exec.v:24|DLATCHmap.v:2" *)
  LATCH _213_ (
    .CLK(_061_),
    .D(R2[2]),
    .Q(data[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "instr_exec.v:24|DLATCHmap.v:2" *)
  LATCH _214_ (
    .CLK(_061_),
    .D(R2[6]),
    .Q(data[7])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "instr_exec.v:24|DLATCHmap.v:2" *)
  LATCH _215_ (
    .CLK(_067_),
    .D(_002_[0]),
    .Q(next_state[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "instr_exec.v:24|DLATCHmap.v:2" *)
  LATCH _216_ (
    .CLK(_067_),
    .D(_002_[1]),
    .Q(next_state[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "instr_exec.v:24|DLATCHmap.v:2" *)
  LATCH _217_ (
    .CLK(_067_),
    .D(_002_[2]),
    .Q(next_state[2])
  );
  assign _001_[6:0] = { _001_[7], 6'h35 };
  assign _005_[2] = 1'h0;
  assign { _006_[2], _006_[0] } = 2'h1;
  assign _076_[0] = _076_[1];
  assign _077_[0] = _076_[1];
  assign { _078_[3:2], _078_[0] } = { _076_[3:2], _078_[1] };
  assign { _084_[7], _084_[5], _084_[3:0] } = { IR[7], IR[2], IR[3], _084_[4], IR[3], _084_[4] };
  assign { _085_[7:4], _085_[2:0] } = { _084_[6], IR[7], _084_[4], IR[2], IR[2], _085_[3], IR[2] };
  assign _086_[2] = state[2];
  assign _087_[1:0] = state[1:0];
  assign { _089_[8], _089_[5:0] } = { 1'h0, _058_, 5'h00 };
  assign { _091_[31:8], _091_[0] } = { 24'h000000, PC[0] };
  assign { IR[6:4], IR[1:0] } = { IR[7], IR[2], IR[2], IR[3:2] };
  assign R0 = 8'h20;
  assign R1 = 8'h15;
  assign { R2[7], R2[5:4], R2[1:0] } = { R2[6], R2[2], R2[2], R2[3:2] };
  assign { data[6:3], data[0] } = { data[7], data[2], data[2:1], data[2] };
  assign tmp_data = { data[7], data[7], data[2], data[2:1], data[2:1], data[2] };
  assign _017_ = 1'h0;
  assign _023_ = IR[2];
  assign _025_ = IR[7];
  assign _057_ = state[2];
  assign _055_ = state[0];
  assign _001_[7] = _015_;
  assign _056_ = state[1];
  assign _003_ = _019_;
  assign _061_ = _035_;
  assign _068_ = _039_;
  assign _051_ = next_state[0];
  assign _054_ = rst;
  assign _004_[0] = _020_;
  assign _052_ = next_state[1];
  assign _004_[1] = _021_;
  assign _053_ = next_state[2];
  assign _004_[2] = _022_;
  assign _002_[0] = _016_;
  assign _002_[1] = _017_;
  assign _002_[2] = _018_;
  assign _059_ = _034_;
  assign _063_ = _036_;
  assign _066_ = _037_;
  assign _067_ = _038_;
  assign _024_ = IR[3];
  assign _027_ = PC[1];
  assign _026_ = PC[0];
  assign _000_[1] = _008_;
  assign _028_ = PC[2];
  assign _000_[2] = _009_;
  assign _029_ = PC[3];
  assign _000_[3] = _010_;
  assign _030_ = PC[4];
  assign _000_[4] = _011_;
  assign _031_ = PC[5];
  assign _000_[5] = _012_;
  assign _032_ = PC[6];
  assign _000_[6] = _013_;
  assign _033_ = PC[7];
  assign _000_[7] = _014_;
  assign _000_[0] = _007_;
endmodule
